{"body":"\n\n\n## Countdown - Snippet 18\n\nToday, a snippet in Elixir!\n\n**Snippet**\n\n![CRCRC-18](/images/articles/CRCRC-18.png)\n\n**Snippet in text**\n\n```elixir\n  @spec compare_dirs(Path.t(), Path.t()) ::\n          {\n            only1_paths :: list(Path.t()),\n            only2_paths :: list(Path.t()),\n            diff :: list({Path.t(), diff :: String.t()})\n          }\n  def compare_dirs(dir1, dir2) do\n    dir1 = Path.expand(dir1)\n    dir2 = Path.expand(dir2)\n\n    assert_dir!(dir1)\n    assert_dir!(dir2)\n\n    dir1_paths = relative_paths(dir1)\n    dir2_paths = relative_paths(dir2)\n\n    only1_paths = dir1_paths -- dir2_paths\n    only2_paths = dir2_paths -- dir1_paths\n    common_paths = dir1_paths -- only1_paths\n    common_files = Enum.reject(common_paths, &File.dir?/1)\n\n    diff =\n      Enum.flat_map(common_files, fn path ->\n        file1 = Path.join(dir1, path)\n        file2 = Path.join(dir2, path)\n\n        case compare_files(file1, file2) do\n          :eq -> []\n          {:diff, diff} -> [{path, diff}]\n        end\n      end)\n\n    {only1_paths, only2_paths, diff}\n  end\n```\n\n**Question**\n\nWrite a summary of this function. What exactly is compared?\n\n## Submission\n\nSubmit your answer in our [form](https://forms.gle/241ak21gMu1fRada6).\n","staticData":{}}